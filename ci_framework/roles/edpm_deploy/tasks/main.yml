---
# Copyright Red Hat, Inc.
# All Rights Reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License"); you may
# not use this file except in compliance with the License. You may obtain
# a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
# WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
# License for the specific language governing permissions and limitations
# under the License.

- name: Set EDPM related vars
  tags:
    - always
  ansible.builtin.set_fact:
    cifmw_edpm_deploy_env: >-
      {{
        cifmw_install_yamls_environment |
        combine({'PATH': cifmw_path}) |
        combine(cifmw_edpm_deploy_extra_vars | default({}))
      }}
    cacheable: true

- name: Save hostvars
  ansible.builtin.copy:
    dest: "{{ ansible_user_dir }}/ci-framework-data/artifacts/hostvars-dump.yml"
    content: "{{ hostvars | to_nice_yaml }}"

- name: Prepare OpenStack Dataplane CR
  vars:
    make_edpm_deploy_prep_env: >-
      {{ cifmw_edpm_deploy_env |
        combine({
          'DATAPLANE_CONFIG_NET_ONLY': cifmw_edpm_deploy_network_only | string | lower,
          'CEPH_STORAGE_MGMT_NETWORK': cifmw_edpm_deploy_storage_mgmt_network | string | lower,
          'CEPH_HCI_NOVA_CONFIG': cifmw_edpm_deploy_enable_hci_nova_config | string | lower,
          'CEPH_FSID': cifmw_edpm_deploy_ceph_fsid,
          'DATAPLANE_TOTAL_NODES': compute_config.amount,
          'DATAPLANE_SINGLE_NODE': (compute_config.amount > 1) | ternary('false', 'true')
        })
      }}
    make_edpm_deploy_prep_dryrun: "{{ cifmw_edpm_deploy_dryrun | bool }}"
  ansible.builtin.include_role:
    name: 'install_yamls_makes'
    tasks_from: 'make_edpm_deploy_prep'

- name: Kustomize and deploy OpenStackDataPlane
  when:
    - not cifmw_edpm_deploy_dryrun | bool
  environment:
    PATH: "{{ cifmw_path }}"
    KUBECONFIG: "{{ cifmw_openshift_kubeconfig }}"
  block:
    - name: Find the OpenStack Dataplane CR manifest
      ansible.builtin.find:
        paths: "{{ cifmw_edpm_deploy_manifests_dir }}/{{ cifmw_install_yamls_defaults['NAMESPACE'] }}/dataplane/cr"
        contains: "kind: OpenStackDataPlane"
        excludes: "kind: Kustomization"
        patterns: "*.yaml"
      register: cifmw_edpm_deploy_cr_manifest_paths

    - name: Ensure manifest exists
      ansible.builtin.assert:
        that: cifmw_edpm_deploy_cr_manifest_paths.matched == 1
        quiet: true
        msg: "Cannot determine OpenStackDataPlane deployment manifest"

    - name: Perform kustomizations to the OpenStackDataPlane CR
      vars:
        cifmw_edpm_kustomize_cr_path: "{{ cifmw_edpm_deploy_cr_manifest_paths.files[0].path }}"
        cifmw_edpm_kustomize_content: "{{ cifmw_edpm_deploy_dataplane_cr_kustomization | default('{}') }}"
      ansible.builtin.include_role:
        name: edpm_kustomize

    - name: Apply the OpenStackDataPlane CR
      when: not cifmw_edpm_deploy_dryrun
      ci_script:
        output_dir: "{{ cifmw_edpm_deploy_basedir }}/artifacts"
        script: "oc apply -f {{ cifmw_edpm_deploy_cr_manifest_paths.files[0].path }}"

    - name: Wait for OpenStackDataplane to be deployed
      ansible.builtin.command:
        cmd: >-
          oc wait OpenStackDataplane {{ cifmw_edpm_kustomize_last_cr_content.metadata.name }}
          --namespace={{ cifmw_install_yamls_defaults['NAMESPACE'] }}
          --for=condition=ready
          --timeout={{ cifmw_edpm_deploy_timeout }}m

    - name: Get the logs of EDPM Deploy
      when:
        - deploy_status is defined
        - "'rc' in deploy_status"
        - deploy_status.rc == 0
      ansible.builtin.shell: |
        for POD in $(oc get pods -o name -n {{ cifmw_install_yamls_defaults['NAMESPACE'] }} | egrep "dataplane-deployment-|nova-edpm-compute");
        do
          echo $POD;
          oc logs -n {{ cifmw_install_yamls_defaults['NAMESPACE'] }} $POD;
        done
      register: edpm_logs

- name: Collect logs for EDPM deploy
  when:
    - edpm_logs is defined
    - "'rc' in edpm_logs"
    - edpm_logs.rc == 0
  block:
    - name: Check for edpm logs directory
      ansible.builtin.file:
        path: "{{ cifmw_edpm_deploy_log_path | dirname }}"
        state: directory

    - name: Collect EDPM deploy logs
      ansible.builtin.copy:
        mode: 0644
        content: "{{ edpm_logs.stdout }}"
        dest: "{{ cifmw_edpm_deploy_log_path }}"

- name: Validate EDPM
  when: cifmw_edpm_deploy_run_validation | bool
  vars:
    make_edpm_deploy_instance_env: "{{ cifmw_edpm_deploy_env }}"
  ansible.builtin.include_role:
    name: 'install_yamls_makes'
    tasks_from: 'make_edpm_deploy_instance'
